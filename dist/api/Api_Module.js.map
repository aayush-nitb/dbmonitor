{"version":3,"sources":["api/Api_Module.ts"],"names":[],"mappings":"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","file":"Api_Module.js","sourcesContent":["import * as express from 'express'\n\nlet request = require('superagent');\nlet CronJob = require('cron').CronJob;\nlet _ = require('underscore');\n\nexport abstract class Api_Module {\n    static triggerService(name: string, result, days: number): boolean {\n        let service = _.findWhere(result.body, { reference: name });\n        if (!service) {\n            console.log(\"Could not fetch service: \" + name);\n            return false;\n        }\n        if (!service.lastTriggered) service.lastTriggered = 0;\n        let diff = Date.now() - service.lastTriggered;\n        console.log(name + \" service was last triggered \" + diff + \" ms ago\");\n        if (diff < days * 86400000) return false;\n        console.log(\"Triggering service: \" + name);\n        request.post(\"https://dbstorestage.herokuapp.com/api/v1/\" + name).end((err, result) => {});\n        return true;\n    }\n    static serve() {\n        new CronJob(\n            '0 */10 * * * *',\n            () => {\n                request.get(\"https://dbstorestage.herokuapp.com/api/v1/tasks\").end((err, result) => {\n                    if (err || !result || !result.body) {\n                        console.log(\"Could not fetch tasks\");\n                        return;\n                    }\n                    let running = _.findWhere(result.body, { isComplete: false });\n                    if (running) return;\n                    request.get(\"https://dbstorestage.herokuapp.com/api/v1/services\").end((err1, result1) => {\n                        if (err1 || !result1 || !result1.body) {\n                            console.log(\"Could not fetch services\");\n                            return;\n                        }\n                        this.triggerService('offers', result1, 1)\n                        || this.triggerService('similarItems', result1, 3)\n                        || this.triggerService('popularItems', result1, 3)\n                        || this.triggerService('galleryItems', result1, 3);                    \n                    });\n                });\n            }, () => {\n                console.log(\"Cron Ended!!\");\n            },\n            true,\n            'Asia/Kolkata',\n            null,\n            true\n        );\n        let port = process.env.PORT || 3001;\n        let app: express.Application = express();\n        app.listen(port, function() {\n            console.log('Cron started on ' + port);\n        });\n    }\n}"],"sourceRoot":"C:\\Aayush\\Apps\\dbcron/server"}